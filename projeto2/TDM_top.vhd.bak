------------------------------------------------
-- Design: MDC CONTROL
-- Entity: mdc_control 
-- Author: Diogo & George
-- Rev.  : 1.0
-- Date  : 05/31/2020
------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.STD_LOGIC_UNSIGNED.ALL;

ENTITY TDM_top IS
	PORT (
		i_CLK   : IN std_logic; -- input clock
		i_CLR_n : IN std_logic; -- input clear/reset
		i_FRAME1 : IN std_logic_vector(15 DOWNTO 0); -- input frame1
		i_FRAME2 : IN std_logic_vector(15 DOWNTO 0); -- input fram2
		i_FRAME3 : IN std_logic_vector(15 DOWNTO 0); -- input frame3
		i_FRAME4 : IN std_logic_vector(15 DOWNTO 0); -- input frame4
		i_TIME  : in std_logic_vector(7 downto 0);   -- input time divisor
		o_FRAME : OUT std_logic_vector(15 DOWNTO 0)  -- output frame
	);
END TDM_top;

ARCHITECTURE rtl OF TDM_top IS

	COMPONENT contador IS
	  PORT (
		 i_PC_CLR : IN std_logic; -- clear/reset
		 i_CLK    : IN std_logic; -- clock
		 i_TIME   : IN std_logic; -- enable 	 
		 o_PC     : OUT std_logic_vector(15 DOWNTO 0); -- data output
		 o_SINAL  : out std_logic));
   END component;

	COMPONENT mux4x1 IS
	  PORT (
  	    i_SEL0 : IN std_logic; -- selector
		 i_SEL1 : IN std_logic; -- selector
		 i_A : IN std_logic_Vector(15 DOWNTO 0); -- data input
		 i_B : IN std_logic_Vector(15 DOWNTO 0); -- data input
		 i_C : IN std_logic_Vector(15 DOWNTO 0); -- data input
		 i_D : IN std_logic_Vector(15 DOWNTO 0); -- data input
		 o_Q : OUT std_logic_Vector(15 DOWNTO 0)); -- data output
	END component;

	COMPONENT ALU IS
		port ( 	 
       i_A     : in  std_logic;  -- data sinal
		 i_SEL0  : out  std_logic; -- data selector input
		 i_SEL1  : out  std_logic; -- data selector input
       o_SEL0  : out  std_logic; -- data selector output
		 o_SEL1  : out  std_logic); -- data selector output
   end component;



	SIGNAL w_PC_CLR, w_PC_INC, w_IR_LD, W_PC_LD : std_logic;
	SIGNAL w_IR, w_ADDITION_INTRUCTION, w_O_PC, w_AUX_SOMA : std_logic_vector(15 DOWNTO 0);
BEGIN

	--connecting reg_PC with processador_unidade_controle
	u_program_counter : program_counter PORT MAP(
		i_PC_CLR => w_PC_CLR,
		i_CLK => i_CLK,
		i_PC_INC => w_PC_INC,
		i_PC_LD => W_PC_LD,
		i_ADDITION => w_ADDITION_INTRUCTION,
		o_PC => w_O_PC
	);
	o_I_ADDR <= w_O_PC;

	w_AUX_SOMA(15 DOWNTO 8) <= "00000000" WHEN (w_IR(7) = '0') ELSE
	"11111111";
	w_AUX_SOMA(7 DOWNTO 0) <= w_IR(7 DOWNTO 0);

	w_ADDITION_INTRUCTION <= w_O_PC + w_AUX_SOMA - "1";

	--connecting instruction_register with processador_unidade_controle	 
	u_instruction_register : instruction_register PORT MAP(
		i_CLR_n => i_CLR_n,
		i_CLK => i_CLK,
		i_DATA => i_DATA,
		i_LD => w_IR_LD,
		o_IR => w_IR);

	--connecting processador_bloco_controle with processador_unidade_controle									 
	u_CONTROLE : control_block PORT MAP(
		i_CLK => i_CLK,
		i_CLR_n => i_CLR_n,
		i_DATA => W_IR,
		i_RF_RP_zero => i_RF_RP_zero,
		o_PC_CLR => w_PC_CLR,
		o_I_RD => o_I_RD,
		o_IR_LD => w_IR_LD,
		o_PC_INC => w_PC_INC,
		o_PC_LD => W_PC_LD,
		o_D_ADDR => o_D_ADDR,
		o_D_RD => o_D_RD,
		o_D_WR => o_D_WR,
		o_RF_S0 => o_RF_S0,
		o_RF_S1 => o_RF_S1,
		o_RF_W_ADDR => o_RF_W_ADDR,
		o_RF_W_WR => o_RF_W_WR,
		o_RF_W_DATA => o_RF_W_DATA,
		o_RF_RP_ADDR => o_RF_RP_ADDR,
		o_RF_RP_RD => o_RF_RP_RD,
		o_RF_RQ_ADDR => o_RF_RQ_ADDR,
		o_RF_RQ_RD => o_RF_RQ_RD,
		o_ALU_S0 => o_ALU_S0,
		o_ALU_S1 => o_ALU_S1
	);

END rtl;